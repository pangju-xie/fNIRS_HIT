# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
# Updated to match the exact UI structure defined in the XML file
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 852)
        MainWindow.setMinimumSize(QtCore.QSize(900, 650))
        MainWindow.setWindowTitle("fNIRS Data Acquisition System")
        
        # Apply the exact stylesheet from the UI file
        MainWindow.setStyleSheet("""QMainWindow {
                background-color: #f5f5f5;
            }

            QTabWidget::pane {
                border: 1px solid #c0c0c0;
                background-color: white;
                border-radius: 5px;
            }

            QTabWidget::tab-bar {
                left: 5px;
            }

            QTabBar::tab {
                background-color: #f0f0f0;
                border: 1px solid #c0c0c0;
                border-bottom-color: #c0c0c0;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
                min-width: 120px;
                min-height: 30px;
                padding: 8px 16px;
                font-weight: bold;
                margin-right: 2px;
            }

            QTabBar::tab:selected {
                background-color: white;
                border-bottom-color: white;
                border-top: 2px solid #0078d4;
            }

            QTabBar::tab:hover:!selected {
                background-color: #e8e8e8;
            }

            QTabBar::tab:disabled {
                background-color: #f8f8f8;
                color: #888888;
                border-color: #e0e0e0;
            }

            QGroupBox {
                font-weight: bold;
                border: 1px solid #cccccc;
                border-radius: 5px;
                margin-top: 10px;
                padding-top: 5px;
                background-color: white;
            }

            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
                background-color: white;
            }

            QPushButton {
                background-color: #0078d4;
                color: white;
                border: none;
                border-radius: 4px;
                font-weight: bold;
                padding: 8px 16px;
                min-height: 24px;
            }

            QPushButton:hover {
                background-color: #106ebe;
            }

            QPushButton:pressed {
                background-color: #005a9e;
            }

            QPushButton:disabled {
                background-color: #cccccc;
                color: #666666;
            }

            QProgressBar {
                border: 1px solid #cccccc;
                border-radius: 3px;
                text-align: center;
                font-size: 11px;
                background-color: #f0f0f0;
            }

            QProgressBar::chunk {
                background-color: #4CAF50;
                border-radius: 2px;
            }""")
        
        # Central widget
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        # Create main tab widget - positioned at (0,0) with size (1200,700)
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1200, 700))
        self.tabWidget.setObjectName("tabWidget")
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setCurrentIndex(4)  # Analysis tab as per UI file
        self.tabWidget.setUsesScrollButtons(True)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(False)
        
        # Create all tabs as defined in the UI file
        self.create_home_tab()
        self.create_configuration_tab()
        self.create_test_tab()
        self.create_acquisition_tab()
        self.create_analysis_tab()
        
        # Create status group box positioned at (0,710) with size (1200,75)
        self.statusGroupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.statusGroupBox.setGeometry(QtCore.QRect(0, 710, 1200, 75))
        self.statusGroupBox.setTitle("")  # Empty title as per UI file
        self.statusGroupBox.setObjectName("statusGroupBox")
        
        # Create status layout
        self.statusLayout = QtWidgets.QHBoxLayout(self.statusGroupBox)
        self.statusLayout.setContentsMargins(10, 10, 10, 10)
        self.statusLayout.setSpacing(15)
        self.statusLayout.setObjectName("statusLayout")
        
        # Connect button with exact specifications from UI file
        self.connectButton = QtWidgets.QPushButton(self.statusGroupBox)
        self.connectButton.setMinimumSize(QtCore.QSize(120, 40))
        self.connectButton.setMaximumSize(QtCore.QSize(150, 35))
        self.connectButton.setText("连接设备")  # Chinese text as per UI file
        self.connectButton.setObjectName("connectButton")
        self.statusLayout.addWidget(self.connectButton)
        
        # Device info layout
        self.deviceInfoLayout = QtWidgets.QVBoxLayout()
        self.deviceInfoLayout.setContentsMargins(0, 0, 0, 0)
        self.deviceInfoLayout.setSpacing(2)
        self.deviceInfoLayout.setObjectName("deviceInfoLayout")
        
        self.deviceIdLabel = QtWidgets.QLabel(self.statusGroupBox)
        self.deviceIdLabel.setMinimumSize(QtCore.QSize(150, 0))
        self.deviceIdLabel.setText("设备 ID: --")  # Chinese text as per UI file
        self.deviceIdLabel.setObjectName("deviceIdLabel")
        self.deviceInfoLayout.addWidget(self.deviceIdLabel)
        
        self.deviceTypeLabel = QtWidgets.QLabel(self.statusGroupBox)
        self.deviceTypeLabel.setMinimumSize(QtCore.QSize(150, 0))
        self.deviceTypeLabel.setText("设备类型: --")  # Chinese text as per UI file
        self.deviceTypeLabel.setObjectName("deviceTypeLabel")
        self.deviceInfoLayout.addWidget(self.deviceTypeLabel)
        
        self.statusLayout.addLayout(self.deviceInfoLayout)
        
        # Connection info layout
        self.connectionInfoLayout = QtWidgets.QVBoxLayout()
        self.connectionInfoLayout.setContentsMargins(0, 0, 0, 0)
        self.connectionInfoLayout.setSpacing(2)
        self.connectionInfoLayout.setObjectName("connectionInfoLayout")
        
        self.connectionStatusLabel = QtWidgets.QLabel(self.statusGroupBox)
        self.connectionStatusLabel.setStyleSheet("QLabel { color: #f44336; font-weight: bold; }")
        self.connectionStatusLabel.setText("⚫ 未连接")  # Chinese text as per UI file
        self.connectionStatusLabel.setObjectName("connectionStatusLabel")
        self.connectionInfoLayout.addWidget(self.connectionStatusLabel)
        
        self.deviceCountLabel = QtWidgets.QLabel(self.statusGroupBox)
        self.deviceCountLabel.setText("数量: 0")  # Chinese text as per UI file
        self.deviceCountLabel.setObjectName("deviceCountLabel")
        self.connectionInfoLayout.addWidget(self.deviceCountLabel)
        
        self.statusLayout.addLayout(self.connectionInfoLayout)
        
        # Battery layout
        self.batteryLayout = QtWidgets.QVBoxLayout()
        self.batteryLayout.setContentsMargins(0, 0, 0, 0)
        self.batteryLayout.setSpacing(2)
        self.batteryLayout.setObjectName("batteryLayout")
        
        self.batteryLabel = QtWidgets.QLabel(self.statusGroupBox)
        self.batteryLabel.setText("电量:")  # Chinese text as per UI file
        self.batteryLabel.setObjectName("batteryLabel")
        self.batteryLayout.addWidget(self.batteryLabel)
        
        self.batteryProgressBar = QtWidgets.QProgressBar(self.statusGroupBox)
        self.batteryProgressBar.setMinimumSize(QtCore.QSize(120, 20))
        self.batteryProgressBar.setMaximumSize(QtCore.QSize(200, 25))
        self.batteryProgressBar.setValue(0)
        self.batteryProgressBar.setObjectName("batteryProgressBar")
        self.batteryLayout.addWidget(self.batteryProgressBar)
        
        self.statusLayout.addLayout(self.batteryLayout)
        
        # Status spacer
        self.statusSpacer = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.statusLayout.addItem(self.statusSpacer)
        
        # Status info label
        self.statusInfoLabel = QtWidgets.QLabel(self.statusGroupBox)
        self.statusInfoLabel.setStyleSheet("QLabel { color: #3498db; font-weight: bold; }")
        self.statusInfoLabel.setText("Status: Ready to connect")
        self.statusInfoLabel.setWordWrap(True)
        self.statusInfoLabel.setObjectName("statusInfoLabel")
        self.statusLayout.addWidget(self.statusInfoLabel)
        
        # Set central widget
        MainWindow.setCentralWidget(self.centralwidget)
        
        # Create menu bar
        self.create_menu_bar(MainWindow)
        
        # Create status bar
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        
        # Connect slots
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def create_home_tab(self):
        """Create home tab with VBoxLayout"""
        self.homeTab = QtWidgets.QWidget()
        self.homeTab.setObjectName("homeTab")
        
        self.homeLayout = QtWidgets.QVBoxLayout(self.homeTab)
        self.homeLayout.setContentsMargins(20, 20, 20, 20)
        self.homeLayout.setSpacing(20)
        self.homeLayout.setObjectName("homeLayout")
        
        self.tabWidget.addTab(self.homeTab, "主页")

    def create_configuration_tab(self):
        """Create configuration tab with VBoxLayout"""
        self.configTab = QtWidgets.QWidget()
        self.configTab.setObjectName("configTab")
        
        self.configLayout = QtWidgets.QVBoxLayout(self.configTab)
        self.configLayout.setContentsMargins(20, 20, 20, 20)
        self.configLayout.setSpacing(15)
        self.configLayout.setObjectName("configLayout")
        
        self.tabWidget.addTab(self.configTab, "配置")

    def create_test_tab(self):
        """Create test tab with VBoxLayout"""
        self.testTab = QtWidgets.QWidget()
        self.testTab.setObjectName("testTab")
        
        self.testLayout = QtWidgets.QVBoxLayout(self.testTab)
        self.testLayout.setContentsMargins(20, 20, 20, 20)
        self.testLayout.setSpacing(15)
        self.testLayout.setObjectName("testLayout")
        
        self.tabWidget.addTab(self.testTab, "测试")

    def create_acquisition_tab(self):
        """Create acquisition tab with VBoxLayout"""
        self.acquisitionTab = QtWidgets.QWidget()
        self.acquisitionTab.setObjectName("acquisitionTab")
        
        self.acquisitionLayout = QtWidgets.QVBoxLayout(self.acquisitionTab)
        self.acquisitionLayout.setContentsMargins(20, 20, 20, 20)
        self.acquisitionLayout.setSpacing(15)
        self.acquisitionLayout.setObjectName("acquisitionLayout")
        
        self.tabWidget.addTab(self.acquisitionTab, "采样")

    def create_analysis_tab(self):
        """Create analysis tab with VBoxLayout"""
        self.analysisTab = QtWidgets.QWidget()
        self.analysisTab.setObjectName("analysisTab")
        
        self.analysisLayout = QtWidgets.QVBoxLayout(self.analysisTab)
        self.analysisLayout.setContentsMargins(20, 20, 20, 20)
        self.analysisLayout.setSpacing(15)
        self.analysisLayout.setObjectName("analysisLayout")
        
        self.tabWidget.addTab(self.analysisTab, "分析")

    def create_menu_bar(self, MainWindow):
        """Create menu bar and actions exactly as defined in UI file"""
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1200, 23))
        self.menubar.setObjectName("menubar")
        
        # File menu
        self.fileMenu = QtWidgets.QMenu(self.menubar)
        self.fileMenu.setTitle("File(&F)")
        self.fileMenu.setObjectName("fileMenu")
        
        # Settings menu
        self.settingsMenu = QtWidgets.QMenu(self.menubar)
        self.settingsMenu.setTitle("Settings(&S)")
        self.settingsMenu.setObjectName("settingsMenu")
        
        # Help menu
        self.helpMenu = QtWidgets.QMenu(self.menubar)
        self.helpMenu.setTitle("Help(&H)")
        self.helpMenu.setObjectName("helpMenu")
        
        MainWindow.setMenuBar(self.menubar)
        
        # Create actions
        self.saveAction = QtWidgets.QAction(MainWindow)
        self.saveAction.setText("&Save")
        self.saveAction.setShortcut("Ctrl+S")
        self.saveAction.setObjectName("saveAction")
        
        self.exportAction = QtWidgets.QAction(MainWindow)
        self.exportAction.setText("&Export Data")
        self.exportAction.setShortcut("Ctrl+E")
        self.exportAction.setObjectName("exportAction")
        
        self.exitAction = QtWidgets.QAction(MainWindow)
        self.exitAction.setText("E&xit")
        self.exitAction.setShortcut("Alt+F4")
        self.exitAction.setObjectName("exitAction")
        
        self.preferencesAction = QtWidgets.QAction(MainWindow)
        self.preferencesAction.setText("&Preferences")
        self.preferencesAction.setObjectName("preferencesAction")
        
        self.aboutAction = QtWidgets.QAction(MainWindow)
        self.aboutAction.setText("&About")
        self.aboutAction.setObjectName("aboutAction")
        
        # Add actions to menus
        self.fileMenu.addAction(self.saveAction)
        self.fileMenu.addAction(self.exportAction)
        self.fileMenu.addSeparator()
        self.fileMenu.addAction(self.exitAction)
        
        self.settingsMenu.addAction(self.preferencesAction)
        
        self.helpMenu.addAction(self.aboutAction)
        
        # Add menus to menu bar
        self.menubar.addAction(self.fileMenu.menuAction())
        self.menubar.addAction(self.settingsMenu.menuAction())
        self.menubar.addAction(self.helpMenu.menuAction())

    def retranslateUi(self, MainWindow):
        """Retranslate UI elements"""
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "fNIRS Data Acquisition System"))
        
        # Tab titles
        self.tabWidget.setTabText(0, _translate("MainWindow", "主页"))
        self.tabWidget.setTabText(1, _translate("MainWindow", "配置"))
        self.tabWidget.setTabText(2, _translate("MainWindow", "测试"))
        self.tabWidget.setTabText(3, _translate("MainWindow", "采样"))
        self.tabWidget.setTabText(4, _translate("MainWindow", "分析"))
        
        # Status elements (keeping Chinese text as per original UI file)
        self.connectButton.setText(_translate("MainWindow", "连接设备"))
        self.deviceIdLabel.setText(_translate("MainWindow", "设备 ID: --"))
        self.deviceTypeLabel.setText(_translate("MainWindow", "设备类型: --"))
        self.connectionStatusLabel.setText(_translate("MainWindow", "⚫ 未连接"))
        self.deviceCountLabel.setText(_translate("MainWindow", "数量: 0"))
        self.batteryLabel.setText(_translate("MainWindow", "电量:"))
        self.statusInfoLabel.setText(_translate("MainWindow", "Status: Ready to connect"))
        
        # Menu items
        self.fileMenu.setTitle(_translate("MainWindow", "File(&F)"))
        self.settingsMenu.setTitle(_translate("MainWindow", "Settings(&S)"))
        self.helpMenu.setTitle(_translate("MainWindow", "Help(&H)"))
        self.saveAction.setText(_translate("MainWindow", "&Save"))
        self.exportAction.setText(_translate("MainWindow", "&Export Data"))
        self.exitAction.setText(_translate("MainWindow", "E&xit"))
        self.preferencesAction.setText(_translate("MainWindow", "&Preferences"))
        self.aboutAction.setText(_translate("MainWindow", "&About"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())